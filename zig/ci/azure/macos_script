#!/bin/sh

set -x
set -e

brew update && brew install s3cmd

ZIGDIR="$(pwd)"
ARCH="x86_64"
CACHE_BASENAME="zig+llvm+lld+clang-$ARCH-macos-gnu-0.8.0-dev.1939+5a3ea9bec"
PREFIX="$HOME/$CACHE_BASENAME"
JOBS="-j2"

rm -rf $PREFIX
cd $HOME
wget -nv "https://ziglang.org/deps/$CACHE_BASENAME.tar.xz"
tar xf "$CACHE_BASENAME.tar.xz"

ZIG="$PREFIX/bin/zig"
NATIVE_LIBC_TXT="$HOME/native_libc.txt"
$ZIG libc >"$NATIVE_LIBC_TXT"
export ZIG_LIBC="$NATIVE_LIBC_TXT"
export CC="$ZIG cc"
export CXX="$ZIG c++"

cd $ZIGDIR

# Make the `zig version` number consistent.
# This will affect the cmake command below.
git config core.abbrev 9
git fetch --unshallow || true
git fetch --tags

mkdir build
cd build
cmake .. \
  -DCMAKE_INSTALL_PREFIX="$(pwd)/release" \
  -DCMAKE_PREFIX_PATH="$PREFIX" \
  -DCMAKE_BUILD_TYPE=Release \
  -DZIG_TARGET_TRIPLE="$ARCH-native-gnu" \
  -DZIG_TARGET_MCPU="baseline" \
  -DZIG_STATIC=ON

# Now cmake will use zig as the C/C++ compiler. We reset the environment variables
# so that installation and testing do not get affected by them.
unset CC
unset CXX
unset ZIG_LIBC

make $JOBS install

# Here we rebuild zig but this time using the Zig binary we just now produced to
# build zig1.o rather than relying on the one built with stage0. See
# https://github.com/ziglang/zig/issues/6830 for more details.
cmake .. -DZIG_EXECUTABLE="$(pwd)/release/bin/zig" -DZIG_TARGET_MCPU="x86_64_v2"
make $JOBS install

for step in test-toolchain test-std docs; do
  release/bin/zig build $step
done

if [ "${BUILD_REASON}" != "PullRequest" ]; then
  mv ../LICENSE release/
  mv ../zig-cache/langref.html release/
  mv release/bin/zig release/
  rmdir release/bin

  VERSION=$(release/zig version)
  DIRNAME="zig-macos-$ARCH-$VERSION"
  TARBALL="$DIRNAME.tar.xz"
  mv release "$DIRNAME"
  tar cfJ "$TARBALL" "$DIRNAME"

  mv "$DOWNLOADSECUREFILE_SECUREFILEPATH" "$HOME/.s3cfg"
  s3cmd put -P --add-header="cache-control: public, max-age=31536000, immutable" "$TARBALL" s3://ziglang.org/builds/

  SHASUM=$(shasum -a 256 $TARBALL | cut '-d ' -f1)
  BYTESIZE=$(wc -c < $TARBALL)

  JSONFILE="macos-$GITBRANCH.json"
  touch $JSONFILE
  echo "{\"tarball\": \"$TARBALL\"," >>$JSONFILE
  echo "\"shasum\": \"$SHASUM\"," >>$JSONFILE
  echo "\"size\": \"$BYTESIZE\"}" >>$JSONFILE

  s3cmd put -P --add-header="Cache-Control: max-age=0, must-revalidate" "$JSONFILE" "s3://ziglang.org/builds/$JSONFILE"
  s3cmd put -P "$JSONFILE" "s3://ziglang.org/builds/$ARCH-macos-$VERSION.json"

  # `set -x` causes these variables to be mangled.
  # See https://developercommunity.visualstudio.com/content/problem/375679/pipeline-variable-incorrectly-inserts-single-quote.html
  set +x
  echo "##vso[task.setvariable variable=tarball;isOutput=true]$TARBALL"
  echo "##vso[task.setvariable variable=shasum;isOutput=true]$SHASUM"
  echo "##vso[task.setvariable variable=bytesize;isOutput=true]$BYTESIZE"
fi
